export PATH=$PATH:$HOME/.scripts/

autoload -Uz compinit && compinit -i
umask 022
setopt autocd

###Настройка истории
HISTFILE=~/.zsh_history
HISTSIZE=5000
SAVEHIST=5000


setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE
setopt INC_APPEND_HISTORY
setopt share_history
setopt append_history

##Расширенный глобинг
setopt extended_glob

#Настройка разделителей
WORDCHARS=''@

stty stop undef
stty start undef

# export EDITOR='vim'
export PAGER='vimpager'

##Загрузка алиасов
if [[ -f $HOME/.aliases ]]; then 
  source $HOME/.aliases
fi

alias ls='ls --color=auto --group-directories-first'

##Цветной grep
export GREP_COLOR='1;33'

_comp_options+=(globdots) # completion for dotfiles

zstyle ':completion:*' menu select

#VIM стиль
bindkey -v

export KEYTIMEOUT=1

#Добавление правого PROMT с именем git brunch and git status 
function gprompt() {
  mes=`git symbolic-ref HEAD 2>/dev/null | cut -d / -f 3`
  durty=`git diff --shortstat 2> /dev/null | tail -n1`
  white=%{$fg[white]%}
  blue=%{$fg[blue]%}
  red=%{$fg[red]%}
  yellow=%{$fg[yellow]%}
  reset=%{$reset_color%}
  if [[ "$mes" != "" ]]; then 
    if [[ $durty != "" ]]; then
      echo "$red $mes $reset"
    else 
      echo "$blue $mes $reset"
    fi
  fi
}

RPROMPT='$(gprompt) '

#PROMPT for user and root

if [[ $EUID == 0 ]]; then
  PROMPT=' %{$fg[red]%} (root) %{$fg[white]%}%~ 
  %{$fg[white]%}->%{$reset_color%} '
else
  PROMPT=' %{$fg[white]%}%~ 
  %{$fg[green]%}->%{$reset_color%} '
  # %{$fg[red]%}✘%{$reset_color%} '
fi

#✗
#Поиск по истории клавишами p и n в стиле vim 
bindkey '^p'  history-beginning-search-backward
bindkey '^n'  history-beginning-search-forward
#
# export TERM='xterm-256color'
autoload -U colors && colors

setopt prompt_subst


# BASE16_SHELL=$HOME/.config/base16-shell/
# [ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

fpath=(~/.zsh/completion $fpath)

# Hooks

autoload -U add-zsh-hook

function auto-ls-after-cd() {
  emulate -L zsh
  if [ "$ZSH_EVAL_CONTEXT" = "toplevel:shfunc" ]; then
    ls
  fi
}

add-zsh-hook chpwd auto-ls-after-cd

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# export FZF_DEFAULT_COMMAND="fd --type file . $HOME"
# export FZF_DEFAULT_COMMAND="fd --type f ."
export FZF_DEFAULT_COMMAND="rg --files --smart-case"
# export FZF_DEFAULT_OPTS="--inline-info"

function fzf-bookmarks-widget() {
  cd $(cat "$HOME/.config/bookmarks.cfg" | fzf --tiebreak=begin --tac --height 10%| awk '{print $1}')
  # cd $(ls | fzf --tiebreak=begin --tac --height 10%| awk '{print $1}')
  zle reset-prompt
  zle redisplay
}

function fzf-history-widget() {
  LBUFFER=$(fc -lnr 1 | fzf --tiebreak=begin)
  zle redisplay
}

function insert-double-roundBrackets() {
  LBUFFER="${LBUFFER}("
  RBUFFER=")${RBUFFER}"
}

function insert-double-curlyBrackets() {
  LBUFFER="${LBUFFER}{"
  RBUFFER="}${RBUFFER}"
}

function insert-double-singleQuotes() {
  LBUFFER="${LBUFFER}'"
  RBUFFER="'${RBUFFER}"
}

zle -N fzf-bookmarks-widget
bindkey '^o' fzf-bookmarks-widget

zle -N fzf-history-widget
bindkey '^k' fzf-history-widget

zle -N insert-double-roundBrackets
bindkey '(' insert-double-roundBrackets

zle -N insert-double-curlyBrackets
bindkey '{' insert-double-curlyBrackets

zle -N insert-double-singleQuotes
bindkey "'" insert-double-singleQuotes

