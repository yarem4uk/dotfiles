# nodejs
snippet im "import" b
import ${1:name} from '${2:$1}';
$0
endsnippet

snippet imas "import" b
import * as ${1:name} from '${2:$1}';
$0
endsnippet

snippet import "import" b
import { ${1:name} } from './${2:$1}';
$0
endsnippet

snippet cl "console.log" 
console.log(${1:`!p 
snip.rv = snip.v.text.strip().strip(";")
`});
endsnippet

snippet ce "console.error" 
console.error(${1:`!p 
snip.rv = snip.v.text.strip().strip(";")
`});
endsnippet

snippet fo "function" 
${1:nameOffunciton}(${2:`!p 
snip.rv = snip.v.text.strip().strip(";")
`});
endsnippet

snippet js "JSON stringify"
JSON.stringify(${1:`!p
snip.rv = snip.v.text.strip().strip(";")
`obj});
endsnippet

snippet jp "JSON parse"
JSON.parse(${1:`!p
snip.rv = snip.v.text.strip().strip(";")
`obj});
endsnippet

snippet promise "new Promise"
new Promise((resolve, reject) => {
  ${1:statments}
});
endsnippet

snippet body "body from request"
const ${1:body} = [];
res.on('data', (chunk) => {
  $1.push(chunk.toString());
}).on('end', () => {
  const html = $1.join();
  ${2:statment}
});
endsnippet

# conditions
snippet if
if ($1) {
  ${2:${VISUAL:statemant}}
}
endsnippet 

snippet else 
else {
  $1
}
endsnippet

snippet ter
${1:condition} ? ${2:true} : ${3:false}
endsnippet

snippet switch 
switch (${1:state}) {
  case $2:
    $3
}
endsnippet

snippet edf "export default function"
export default (${1:args}) => {
  ${2:statemant}
};
endsnippet

snippet fn
const ${1:name} = (${2:args}) => {
  ${3:statemant}
};
endsnippet

snippet f
($2) => {
  $3
};
endsnippet

snippet sf
${1:arg} => ${2:$1}
endsnippet

snippet iter 
const ${1:iter} = (${2:item}, ${3:acc}) => {
  if ($6) {
    return ${7:$3};
  }
  return iter(${4:$2}, ${5:$3});
};
endsnippet

snippet head
const [${1:head}, ...${2:rest}] = ${0:arr};
endsnippet

# OPP

snippet class
export default class ${1:Name} {
  $2

}
endsnippet

snippet m 
${1:nameOfMethod}($2) {
  $3
}
endsnippet

snippet lodash
import _ from 'lodash';
$0
endsnippet

# nock
snippet ndis "nock.disableNetConnect"
nock.disableNetConnect();
endsnippet

# generators

snippet gen "generators"
const ${1:generator} = function* () {
  ${2:yield}
};
endsnippet

snippet of "for..of"
for (const ${1:v} of ${2:generator}) {
  ${3:function}($1);
}
endsnippet

# ERROR

snippet tc "try/catch"
try {
  ${1:statment}
} catch (${2:err}) {
  ${3:do}
}
endsnippet


# Express 
snippet get "app.get(...)"
app.get('${1:/}', (req, res) => {
  ${2:res}
});
endsnippet

snippet post "app.post(...)"
app.post('${1:/}', (req, res) => {
  ${2:res}
});
endsnippet

# Jest
snippet ds "describe it"
describe('${1:describ}', () => {
  it('${2:test describ}', () => {
    ${3:statment}
  });
});
endsnippet

snippet it "test branch"
it('${1:test describ}', () => {
  ${2:statment}
});
endsnippet

snippet tobe "expect toBe"
expect(${1:expect}).toBe(${2:value});
endsnippet

snippet toundef "expect toBe.Undefined"
expect(${1:expect}).toBe.Undefined(${2:value});
endsnippet

snippet tocontain "expect toContain"
expect(${1:expect}).toContain(${2:value});
endsnippet

# HTTP

snippet hget "http get"
http.get('http://${1:host}', res => {
  ${2:res}
});
endsnippet

#Vue

snippet vue
new Vue({
  el: '#vue-app',

  data: {
    $1
  },

  methods: {
    $2
  },

});
endsnippet

snippet st "setTimeout function"
setTimeout(() => {
  ${2:statment}
}, ${1:delay});
endsnippet

snippet rf "readFile"
fs.readFile(${1:path/to/file}, 'utf8', (err, ${2:data}) => {
  if (err) {
    console.log(err);
  }
  ${3:console.log($2)};
});
endsnippet

global !p
def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
    if len(opts) == 1:
        return opts[0]
    return '(' + '|'.join(opts) + ')'
endglobal


snippet vs "state"  
$1`!p
snip.rv= complete(t[1], ['state', 'getters', 'mutations', 'actions',])
`: {
  ${2:components}
},
endsnippet

snippet getters "getters"
const getters = {
  $1
};
endsnippet

snippet gm "methods in getters"
${1:nameOfGetters}: state => {
  ${2:statement}
},
endsnippet
